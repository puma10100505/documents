// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameplay.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gameplay_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gameplay_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gameplay_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gameplay_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gameplay_2eproto;
namespace yinpsoft {
namespace pb {
class PBGameObject;
class PBGameObjectDefaultTypeInternal;
extern PBGameObjectDefaultTypeInternal _PBGameObject_default_instance_;
class PBRotation;
class PBRotationDefaultTypeInternal;
extern PBRotationDefaultTypeInternal _PBRotation_default_instance_;
class PBVector3;
class PBVector3DefaultTypeInternal;
extern PBVector3DefaultTypeInternal _PBVector3_default_instance_;
}  // namespace pb
}  // namespace yinpsoft
PROTOBUF_NAMESPACE_OPEN
template<> ::yinpsoft::pb::PBGameObject* Arena::CreateMaybeMessage<::yinpsoft::pb::PBGameObject>(Arena*);
template<> ::yinpsoft::pb::PBRotation* Arena::CreateMaybeMessage<::yinpsoft::pb::PBRotation>(Arena*);
template<> ::yinpsoft::pb::PBVector3* Arena::CreateMaybeMessage<::yinpsoft::pb::PBVector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace yinpsoft {
namespace pb {

// ===================================================================

class PBRotation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yinpsoft.pb.PBRotation) */ {
 public:
  PBRotation();
  virtual ~PBRotation();

  PBRotation(const PBRotation& from);
  PBRotation(PBRotation&& from) noexcept
    : PBRotation() {
    *this = ::std::move(from);
  }

  inline PBRotation& operator=(const PBRotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBRotation& operator=(PBRotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBRotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBRotation* internal_default_instance() {
    return reinterpret_cast<const PBRotation*>(
               &_PBRotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBRotation& a, PBRotation& b) {
    a.Swap(&b);
  }
  inline void Swap(PBRotation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBRotation* New() const final {
    return CreateMaybeMessage<PBRotation>(nullptr);
  }

  PBRotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBRotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBRotation& from);
  void MergeFrom(const PBRotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBRotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yinpsoft.pb.PBRotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameplay_2eproto);
    return ::descriptor_table_gameplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:yinpsoft.pb.PBRotation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameplay_2eproto;
};
// -------------------------------------------------------------------

class PBVector3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yinpsoft.pb.PBVector3) */ {
 public:
  PBVector3();
  virtual ~PBVector3();

  PBVector3(const PBVector3& from);
  PBVector3(PBVector3&& from) noexcept
    : PBVector3() {
    *this = ::std::move(from);
  }

  inline PBVector3& operator=(const PBVector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBVector3& operator=(PBVector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBVector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBVector3* internal_default_instance() {
    return reinterpret_cast<const PBVector3*>(
               &_PBVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PBVector3& a, PBVector3& b) {
    a.Swap(&b);
  }
  inline void Swap(PBVector3* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBVector3* New() const final {
    return CreateMaybeMessage<PBVector3>(nullptr);
  }

  PBVector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBVector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBVector3& from);
  void MergeFrom(const PBVector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBVector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yinpsoft.pb.PBVector3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameplay_2eproto);
    return ::descriptor_table_gameplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:yinpsoft.pb.PBVector3)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameplay_2eproto;
};
// -------------------------------------------------------------------

class PBGameObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yinpsoft.pb.PBGameObject) */ {
 public:
  PBGameObject();
  virtual ~PBGameObject();

  PBGameObject(const PBGameObject& from);
  PBGameObject(PBGameObject&& from) noexcept
    : PBGameObject() {
    *this = ::std::move(from);
  }

  inline PBGameObject& operator=(const PBGameObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBGameObject& operator=(PBGameObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PBGameObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBGameObject* internal_default_instance() {
    return reinterpret_cast<const PBGameObject*>(
               &_PBGameObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PBGameObject& a, PBGameObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PBGameObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBGameObject* New() const final {
    return CreateMaybeMessage<PBGameObject>(nullptr);
  }

  PBGameObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBGameObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PBGameObject& from);
  void MergeFrom(const PBGameObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBGameObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yinpsoft.pb.PBGameObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameplay_2eproto);
    return ::descriptor_table_gameplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kGoidFieldNumber = 1,
  };
  // .yinpsoft.pb.PBVector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::yinpsoft::pb::PBVector3& position() const;
  ::yinpsoft::pb::PBVector3* release_position();
  ::yinpsoft::pb::PBVector3* mutable_position();
  void set_allocated_position(::yinpsoft::pb::PBVector3* position);
  private:
  const ::yinpsoft::pb::PBVector3& _internal_position() const;
  ::yinpsoft::pb::PBVector3* _internal_mutable_position();
  public:

  // int32 goid = 1;
  void clear_goid();
  ::PROTOBUF_NAMESPACE_ID::int32 goid() const;
  void set_goid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goid() const;
  void _internal_set_goid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:yinpsoft.pb.PBGameObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::yinpsoft::pb::PBVector3* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 goid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameplay_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBRotation

// float x = 1;
inline void PBRotation::clear_x() {
  x_ = 0;
}
inline float PBRotation::_internal_x() const {
  return x_;
}
inline float PBRotation::x() const {
  // @@protoc_insertion_point(field_get:yinpsoft.pb.PBRotation.x)
  return _internal_x();
}
inline void PBRotation::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PBRotation::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:yinpsoft.pb.PBRotation.x)
}

// float y = 2;
inline void PBRotation::clear_y() {
  y_ = 0;
}
inline float PBRotation::_internal_y() const {
  return y_;
}
inline float PBRotation::y() const {
  // @@protoc_insertion_point(field_get:yinpsoft.pb.PBRotation.y)
  return _internal_y();
}
inline void PBRotation::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PBRotation::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:yinpsoft.pb.PBRotation.y)
}

// float z = 3;
inline void PBRotation::clear_z() {
  z_ = 0;
}
inline float PBRotation::_internal_z() const {
  return z_;
}
inline float PBRotation::z() const {
  // @@protoc_insertion_point(field_get:yinpsoft.pb.PBRotation.z)
  return _internal_z();
}
inline void PBRotation::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PBRotation::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:yinpsoft.pb.PBRotation.z)
}

// float w = 4;
inline void PBRotation::clear_w() {
  w_ = 0;
}
inline float PBRotation::_internal_w() const {
  return w_;
}
inline float PBRotation::w() const {
  // @@protoc_insertion_point(field_get:yinpsoft.pb.PBRotation.w)
  return _internal_w();
}
inline void PBRotation::_internal_set_w(float value) {
  
  w_ = value;
}
inline void PBRotation::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:yinpsoft.pb.PBRotation.w)
}

// -------------------------------------------------------------------

// PBVector3

// float x = 1;
inline void PBVector3::clear_x() {
  x_ = 0;
}
inline float PBVector3::_internal_x() const {
  return x_;
}
inline float PBVector3::x() const {
  // @@protoc_insertion_point(field_get:yinpsoft.pb.PBVector3.x)
  return _internal_x();
}
inline void PBVector3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PBVector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:yinpsoft.pb.PBVector3.x)
}

// float y = 2;
inline void PBVector3::clear_y() {
  y_ = 0;
}
inline float PBVector3::_internal_y() const {
  return y_;
}
inline float PBVector3::y() const {
  // @@protoc_insertion_point(field_get:yinpsoft.pb.PBVector3.y)
  return _internal_y();
}
inline void PBVector3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PBVector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:yinpsoft.pb.PBVector3.y)
}

// float z = 3;
inline void PBVector3::clear_z() {
  z_ = 0;
}
inline float PBVector3::_internal_z() const {
  return z_;
}
inline float PBVector3::z() const {
  // @@protoc_insertion_point(field_get:yinpsoft.pb.PBVector3.z)
  return _internal_z();
}
inline void PBVector3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PBVector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:yinpsoft.pb.PBVector3.z)
}

// -------------------------------------------------------------------

// PBGameObject

// int32 goid = 1;
inline void PBGameObject::clear_goid() {
  goid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBGameObject::_internal_goid() const {
  return goid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBGameObject::goid() const {
  // @@protoc_insertion_point(field_get:yinpsoft.pb.PBGameObject.goid)
  return _internal_goid();
}
inline void PBGameObject::_internal_set_goid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goid_ = value;
}
inline void PBGameObject::set_goid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goid(value);
  // @@protoc_insertion_point(field_set:yinpsoft.pb.PBGameObject.goid)
}

// .yinpsoft.pb.PBVector3 position = 2;
inline bool PBGameObject::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool PBGameObject::has_position() const {
  return _internal_has_position();
}
inline void PBGameObject::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::yinpsoft::pb::PBVector3& PBGameObject::_internal_position() const {
  const ::yinpsoft::pb::PBVector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::yinpsoft::pb::PBVector3*>(
      &::yinpsoft::pb::_PBVector3_default_instance_);
}
inline const ::yinpsoft::pb::PBVector3& PBGameObject::position() const {
  // @@protoc_insertion_point(field_get:yinpsoft.pb.PBGameObject.position)
  return _internal_position();
}
inline ::yinpsoft::pb::PBVector3* PBGameObject::release_position() {
  // @@protoc_insertion_point(field_release:yinpsoft.pb.PBGameObject.position)
  
  ::yinpsoft::pb::PBVector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::yinpsoft::pb::PBVector3* PBGameObject::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::yinpsoft::pb::PBVector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::yinpsoft::pb::PBVector3* PBGameObject::mutable_position() {
  // @@protoc_insertion_point(field_mutable:yinpsoft.pb.PBGameObject.position)
  return _internal_mutable_position();
}
inline void PBGameObject::set_allocated_position(::yinpsoft::pb::PBVector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:yinpsoft.pb.PBGameObject.position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace yinpsoft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gameplay_2eproto
